generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  password      String?
  role          UserRole  @default(USER)
  accounts      Account[]

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId], map: "accounts_user_id_fkey")
  @@map("accounts")
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
  @@map("verificationTokens")
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
  @@map("passwordResetTokens")
}

enum UserRole {
  ADMIN
  USER
}

model Project {
  id    String    @id @default(cuid())
  name  String
  code  Int?
  sop   DateTime? @unique
  eol   DateTime?
  parts Part[]

  @@map("projects")
}

model Image {
  id           String         @id @default(cuid())
  url          String
  HandlingUnit HandlingUnit[]

  @@map("images")
}

model Part {
  id            String         @id @default(cuid())
  imgUrl        String
  name          String
  project       String
  length        Int
  width         Int
  heigth        Int
  weigth        Int?
  handlingUnits HandlingUnit[]
  Project       Project?       @relation(fields: [projectId], references: [id])
  projectId     String?

  @@map("parts")
}

model HandlingUnit {
  id          String  @id @default(cuid())
  name        String
  description String
  pictures    Image[]
  length      Int
  width       Int
  heigth      Int
  density     Int
  process     String
  supplier    String
  part        Part?   @relation(fields: [partId], references: [id])
  partId      String?
  plant       Plant   @relation(fields: [plantId], references: [id])
  plantId     String

  @@map("hanlingUnits")
}

model HandlingUnitType {
  id          String @id @default(cuid())
  name        String
  description String
  imgUrl      String

  @@map("hanlingUnitTypes")
}

model Country {
  id    String  @id @default(cuid())
  name  String
  code  String
  slug  String  @unique
  Plant Plant[]

  @@map("countries")
}

model Plant {
  id           String         @id @default(cuid())
  name         String
  address      String
  country      Country        @relation(fields: [countryId], references: [id])
  countryId    String
  HandlingUnit HandlingUnit[]

  @@map("plants")
}
